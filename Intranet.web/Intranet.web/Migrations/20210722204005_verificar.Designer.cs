// <auto-generated />
using System;
using Intranet.web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intranet.web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210722204005_verificar")]
    partial class verificar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Intranet.web.Data.Entities.Activos.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datecreate");

                    b.Property<DateTime>("Datemod");

                    b.Property<int>("LifeUse");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<bool>("Otros");

                    b.Property<string>("Usermod")
                        .HasMaxLength(500);

                    b.Property<string>("Usucreo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Activos.Fabric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datecreate");

                    b.Property<DateTime>("Datemod");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35);

                    b.Property<string>("Usermod")
                        .HasMaxLength(500);

                    b.Property<string>("Usucreo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Fabrics");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Activos.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<int?>("CategoryId");

                    b.Property<string>("Coment")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("DateMod");

                    b.Property<DateTime>("Dateitemcreate");

                    b.Property<string>("Datepurchase")
                        .IsRequired();

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("FabricId");

                    b.Property<int?>("ModelId");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ProviderId");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("TimeGarant");

                    b.Property<double>("UnitValue");

                    b.Property<string>("Usermod");

                    b.Property<string>("Usucreate");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FabricId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Activos.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datecreate");

                    b.Property<DateTime>("Datemod");

                    b.Property<string>("Name");

                    b.Property<string>("Usermod")
                        .HasMaxLength(500);

                    b.Property<string>("Usucreo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Activos.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datecreate");

                    b.Property<DateTime>("Datemod");

                    b.Property<string>("Di");

                    b.Property<string>("Direccion");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Usermod")
                        .HasMaxLength(500);

                    b.Property<string>("Usucreo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int?>("SiteHeadquartersId");

                    b.HasKey("Id");

                    b.HasIndex("SiteHeadquartersId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.CajaCompensacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CajaCompensacions");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.CargosAsg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateAsg");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("PositionEmployeeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PositionEmployeeId");

                    b.ToTable("CargosAsgs");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Clasification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TimeCreate")
                        .HasMaxLength(100);

                    b.Property<string>("Usercrete")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Clasifications");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Mes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.HasKey("Id");

                    b.ToTable("Mes");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Negociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaseLiquidacion");

                    b.Property<int?>("ClasificationId");

                    b.Property<string>("DateIn");

                    b.Property<DateTime>("DateModifica");

                    b.Property<string>("DatePaga")
                        .HasMaxLength(30);

                    b.Property<string>("DateVerifica")
                        .HasMaxLength(30);

                    b.Property<DateTime>("Datecreate");

                    b.Property<string>("Detalle")
                        .IsRequired()
                        .HasMaxLength(600);

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<int?>("MesId");

                    b.Property<bool>("Pago");

                    b.Property<int?>("ProvidercomprasId");

                    b.Property<string>("UserId");

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserPaga")
                        .HasMaxLength(30);

                    b.Property<string>("UserVerifica")
                        .HasMaxLength(30);

                    b.Property<string>("UsuCreate")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ValorNegociacion");

                    b.Property<bool>("Verificar");

                    b.HasKey("Id");

                    b.HasIndex("ClasificationId");

                    b.HasIndex("MesId");

                    b.HasIndex("ProvidercomprasId");

                    b.HasIndex("UserId");

                    b.ToTable("Negociation");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Pagos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatePago");

                    b.Property<DateTime>("Dateregistro");

                    b.Property<string>("DocCobro")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<string>("DocLegalizacion")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<int?>("NegociationId");

                    b.Property<string>("Novedad")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Userregistro")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ValorPagado");

                    b.HasKey("Id");

                    b.HasIndex("NegociationId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.ProductBonifi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Articulo")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Cant");

                    b.Property<string>("Plu")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<int>("Total");

                    b.Property<int>("ValorUnit");

                    b.HasKey("Id");

                    b.ToTable("ProductBonifi");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Providercompras", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameProvider")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("TelProvider");

                    b.Property<string>("TimeCreate")
                        .HasMaxLength(100);

                    b.Property<string>("UsuCreate")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Providercompras");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Verificado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dateregistro");

                    b.Property<int?>("NegociationId");

                    b.Property<string>("Novedad")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("UserRegistro");

                    b.HasKey("Id");

                    b.HasIndex("NegociationId");

                    b.ToTable("Verificados");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Clausulas")
                        .HasMaxLength(500);

                    b.Property<string>("DateEnd")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("DateStart")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Note")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Credit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreditEntitiesId");

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<int>("DeadlinePay");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NumberL")
                        .IsRequired();

                    b.Property<long>("Quotmonthly");

                    b.Property<DateTime>("StartDate");

                    b.Property<long>("TotalPrice");

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("CreditEntitiesId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Credits");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.CreditEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CreditEntities");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<int?>("AreaId");

                    b.Property<bool>("Arl");

                    b.Property<int?>("CajaCompensacionId");

                    b.Property<bool>("CtaNomina");

                    b.Property<string>("DateCumple");

                    b.Property<string>("DateIngreso");

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<string>("DateRetiro");

                    b.Property<int>("Document")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("EpsId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("License");

                    b.Property<string>("Movil")
                        .HasMaxLength(70);

                    b.Property<string>("NivelEducation")
                        .HasMaxLength(50);

                    b.Property<int>("NumeroCtaAhorros")
                        .HasMaxLength(80);

                    b.Property<int?>("PensionId");

                    b.Property<string>("Rh")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SiteBirth")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SiteExpedition")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Sueldo")
                        .HasMaxLength(80);

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("CajaCompensacionId");

                    b.HasIndex("EpsId");

                    b.HasIndex("PensionId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Endowment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime>("DateDelivery");

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<DateTime>("DateVence");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EndowmentTypeId");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EndowmentTypeId");

                    b.ToTable("Endowments");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.EndowmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<int>("EspirationDate");

                    b.Property<string>("NameType")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("UserModify");

                    b.Property<string>("UserRegistra");

                    b.HasKey("Id");

                    b.ToTable("EndowmentsTypes");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Eps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Eps");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Exams", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Activo");

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("ExamsTypeId");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ExamsTypeId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.ExamsType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120);

                    b.HasKey("Id");

                    b.ToTable("ExamsTypes");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Incapacity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CantDay");

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<int?>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Novedad")
                        .IsRequired()
                        .HasMaxLength(350);

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("TypeNewId");

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TypeNewId");

                    b.ToTable("Incapacities");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.More.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datecreate");

                    b.Property<DateTime>("Datemod");

                    b.Property<string>("Name");

                    b.Property<string>("Usermod")
                        .HasMaxLength(500);

                    b.Property<string>("Usucreo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Pension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Pensions");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .HasMaxLength(30);

                    b.Property<string>("relationship")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.PositionEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("PositionEmployees");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.purchasing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Purchasings");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Recursoshumanos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Recursoshumanos");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.SiteHeadquarters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SiteHeadquarters");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Sons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateModify");

                    b.Property<DateTime>("DateRegistro");

                    b.Property<string>("Datebirth")
                        .IsRequired();

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("UserModify")
                        .HasMaxLength(30);

                    b.Property<string>("UserRegistra")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Sons");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.StoreLeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StoreLeaders");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.TypeNew", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("TypeNews");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Activo");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DateRegistro");

                    b.Property<int>("Document");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Movil")
                        .HasMaxLength(10);

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.UserImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("ImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Activos.Item", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Activos.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Intranet.web.Data.Entities.Employee")
                        .WithMany("Items")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Intranet.web.Data.Entities.Activos.Fabric", "Fabric")
                        .WithMany("Items")
                        .HasForeignKey("FabricId");

                    b.HasOne("Intranet.web.Data.Entities.Activos.Model", "Model")
                        .WithMany("Items")
                        .HasForeignKey("ModelId");

                    b.HasOne("Intranet.web.Data.Entities.Activos.Provider", "Provider")
                        .WithMany("Items")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Area", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.SiteHeadquarters", "SiteHeadquarters")
                        .WithMany("Areas")
                        .HasForeignKey("SiteHeadquartersId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.CargosAsg", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("CargosAsgs")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Intranet.web.Data.Entities.PositionEmployee", "PositionEmployee")
                        .WithMany("CargosAsgs")
                        .HasForeignKey("PositionEmployeeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Negociation", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Compras.Clasification", "Clasification")
                        .WithMany("Negociations")
                        .HasForeignKey("ClasificationId");

                    b.HasOne("Intranet.web.Data.Entities.Compras.Mes", "Mes")
                        .WithMany("Negociations")
                        .HasForeignKey("MesId");

                    b.HasOne("Intranet.web.Data.Entities.Compras.Providercompras", "Providercompras")
                        .WithMany("Negociations")
                        .HasForeignKey("ProvidercomprasId");

                    b.HasOne("Intranet.web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Pagos", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Compras.Negociation", "Negociation")
                        .WithMany("Pagos")
                        .HasForeignKey("NegociationId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Compras.Verificado", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Compras.Negociation", "Negociation")
                        .WithMany("Verificados")
                        .HasForeignKey("NegociationId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Contract", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Credit", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.CreditEntities", "CreditEntities")
                        .WithMany("Credits")
                        .HasForeignKey("CreditEntitiesId");

                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("Credits")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Employee", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Area", "Area")
                        .WithMany("Employees")
                        .HasForeignKey("AreaId");

                    b.HasOne("Intranet.web.Data.Entities.CajaCompensacion", "CajaCompensacion")
                        .WithMany("Employees")
                        .HasForeignKey("CajaCompensacionId");

                    b.HasOne("Intranet.web.Data.Entities.Eps", "Eps")
                        .WithMany("Employees")
                        .HasForeignKey("EpsId");

                    b.HasOne("Intranet.web.Data.Entities.Pension", "Pension")
                        .WithMany("Employees")
                        .HasForeignKey("PensionId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Endowment", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("Endowments")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Intranet.web.Data.Entities.EndowmentType", "EndowmentType")
                        .WithMany("Endowments")
                        .HasForeignKey("EndowmentTypeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Exams", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("Exams")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Intranet.web.Data.Entities.ExamsType", "ExamsType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamsTypeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Incapacity", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("Incapacities")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Intranet.web.Data.Entities.TypeNew", "TypeNew")
                        .WithMany("Incapacities")
                        .HasForeignKey("TypeNewId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Manager", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.PersonContact", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("PersonContacts")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.purchasing", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Recursoshumanos", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.Sons", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("Sons")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.StoreLeader", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Intranet.web.Data.Entities.UserImages", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.Employee", "Employee")
                        .WithMany("UserImages")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Intranet.web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Intranet.web.Data.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
